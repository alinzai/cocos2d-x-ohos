"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,s,i){void 0===i&&(i=s);var r=Object.getOwnPropertyDescriptor(t,s);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[s]}}),Object.defineProperty(e,i,r)}:function(e,t,s,i){void 0===i&&(i=s),e[i]=t[s]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.prototype.hasOwnProperty.call(e,s)&&__createBinding(t,e,s);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.MergeProfile=void 0;const fs=__importStar(require("fs-extra")),lodash_1=require("lodash"),common_const_js_1=require("../const/common-const.js"),ohos_logger_js_1=require("../utils/log/ohos-logger.js"),task_names_js_1=require("./common/task-names.js"),pre_build_js_1=require("./pre-build.js"),file_set_js_1=require("@ohos/hvigor-base/src/internal/snapshot/util/file-set.js");var Task=task_names_js_1.TaskNames.Task;const abstract_merge_profile_js_1=require("./abstract-merge-profile.js"),inject_util_js_1=require("../utils/inject-util.js");class MergeProfile extends abstract_merge_profile_js_1.AbstractMergeProfile{constructor(e){super(e,Task.MERGE_PROFILE),this._log=ohos_logger_js_1.OhosLogger.getLogger(MergeProfile.name),this._isHarModule=this.service.getModuleModel().isHarModule(),this._multiProjects=this._projectModel.getProfileOpt().app.multiProjects||!1,this._harLibs=this.mergeHarLibs(common_const_js_1.CommonConst.MODULE_JSON),this._appRes=this._projectModel.getAppRes();const t=this.service.getModuleModel().getSourceSetByTargetName(this._targetName);this._moduleTargetRes=t.getModuleTargetRes(),this._mergedModuleJson=this._pathInfo.getIntermediatesMergeProfile()}initTaskDepends(){this.module.registryDependsOnTask(this,new pre_build_js_1.PreBuild(this.targetService))}initHarModuleDepends(){this.service.getModuleDependencyNames().forEach((e=>{this.dependsOn(`default@${Task.MERGE_PROFILE.name}`,e)}))}doTaskAction(e){let t=(0,lodash_1.cloneDeep)(this._appRes.getAppResOpt());void 0!==t.app.multiProjects&&(this._log.warn(`Field 'multiProjects' should be configured in project's build-profile.json5. The value of this field configured in app.json5 will be ignored. Please configure this field in ${this._projectModel.getProfilePath()}.`),delete t.app.multiProjects),this._isHarModule&&(t={app:{bundleName:t.app.bundleName,debug:t.app.debug,versionCode:t.app.versionCode,versionName:t.app.versionName,minCompatibleVersionCode:t.app.minCompatibleVersionCode,minAPIVersion:t.app.minAPIVersion,targetAPIVersion:t.app.targetAPIVersion,apiReleaseType:t.app.apiReleaseType}});const s=this._moduleTargetRes.getModuleJsonOpt();this._harLibs.forEach((e=>{fs.pathExistsSync(e)||this._log.warn(`${e} does not exist. This library will not be merged. This may occur when the project is manually modified and the local library is not declared in ${this._projectModel.getProfilePath()}. Please confirm the correctness of this module. You may try to solve the problem by declare it in build-profile.json5.`)}));const i={...t,...s};this.mergeDslConfig(i),inject_util_js_1.InjectUtil.isDebug()&&(i.app.debug=!0),fs.outputJSONSync(this._mergedModuleJson,i,{spaces:"\t"})}mergeDslConfig(e){this._bundleName&&(e.app.bundleName=this._bundleName,this._log.debug(`Change app bundleName with '${this._bundleName}'.`)),this._multiProjects&&(e.app.multiProjects=this._multiProjects,this._log.debug(`Change app multiProjects with '${this._multiProjects}'.`)),e.app.targetAPIVersion=this._targetSdkVersion,this._log.debug(`Change app target API version with '${this._targetSdkVersion}'`),e.app.minAPIVersion=this._compatibleSdkVersion,this._log.debug(`Change app minimum API version with '${this._compatibleSdkVersion}'`),e.app.apiReleaseType=this._releaseType,this._log.debug(`Change app api release type with '${this._releaseType}'`)}declareInputs(){return super.declareInputs().set(abstract_merge_profile_js_1.INPUT_KEY.isHarModule,this._isHarModule).set(abstract_merge_profile_js_1.INPUT_KEY.multiProjects,this._multiProjects)}declareInputFiles(){const e=new file_set_js_1.FileSet;return e.addEntry(this._appRes.getJsonPath()),e.addEntry(this._moduleTargetRes.getJsonPath()),this._harLibs.forEach((t=>{fs.existsSync(t)&&e.addEntry(t)})),e}declareOutputFiles(){return(new file_set_js_1.FileSet).addEntry(this._mergedModuleJson)}}exports.MergeProfile=MergeProfile;