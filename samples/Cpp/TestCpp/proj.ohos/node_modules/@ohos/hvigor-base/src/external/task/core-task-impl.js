"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.CoreTaskImpl=void 0;const task_js_1=require("./task.js"),noop_js_1=require("../../util/noop.js"),task_path_util_js_1=require("../../internal/task/util/task-path-util.js"),hvigor_log_js_1=require("../../log/hvigor-log.js"),class_identify_util_js_1=require("../../util/class-identify-util.js"),class_type_const_js_1=require("../../options/class-type-const.js"),task_execute_status_js_1=require("../../internal/task/core/task-execute-status.js"),metric_js_1=require("../../metrics/metric.js"),metric_service_js_1=require("../../metrics/metric-service.js"),worker_delegator_js_1=require("../../internal/pool/worker-pool/worker-delegator.js"),_log=hvigor_log_js_1.HvigorLogger.getLogger("hvigor-core-task");class CoreTaskImpl extends task_js_1.Task{constructor(e,t){super(),this.dependsTask=[],this.fn=noop_js_1.noop,this.node=e;const s=Object.assign({group:task_js_1.Task.OTHER_TASK_GROUP,isEnabled:!0},t);this.name=s.name,this.group=s.group,this.isEnabled=s.isEnabled,this.description=s.description,this.path=CoreTaskImpl.createTaskPath(this.node,this.name),this.taskExecutedStatus=new task_execute_status_js_1.TaskExecuteStatus,this.metric=metric_service_js_1.MetricService.getInstance().newMetric("overallTime",this.getName(),this.getNode().getName()).withType(metric_js_1.MetricType.BUILD_LINE),this.subMetricMap=new Map,this.workerDelegator=new worker_delegator_js_1.WorkerPoolDelegator(this)}getWorkerPool(){return this.workerDelegator}execute(){this.getAction().bind(this)()}setDependsOn(...e){return this.dependsTask=e.map((e=>CoreTaskImpl.createTaskPath(this.node,e))),this}getDependsOn(){return this.dependsTask}addDependsOn(e){return this.dependsTask.push(CoreTaskImpl.createTaskPath(this.node,e)),this}dependsOn(e,t){let s,r;return s=e instanceof task_js_1.Task?e.getName():e,r=void 0===t?this.node:"string"==typeof t?this.findTargetNode(t):t,void 0===r&&_log.errorMessageExit(`Failed to find the '${t}' node while setting the task dependencies in the ${this.node.getName()} module's task: ${this.name}.`),this.dependsTask.push(CoreTaskImpl.createTaskPath(r,s)),this}findTargetNode(e){let t=this.node.findModuleByName(e);return void 0===t&&this.isProject(e)&&(t=this.node.getProject()),t}isProject(e){return":"===e||e===this.node.getProject().getName()}getAction(){return this.fn}getNode(){return this.node}getName(){return this.name}getPath(){return this.path}getEnabled(){return this.isEnabled}setEnabled(e){return this.isEnabled=e,this}setDescription(e){return this.description=e,this}getDescription(){return this.description}getGroup(){return this.group}setGroup(e){return this.group=e,this}doNotTrackState(e){this.taskExecutedStatus.unTrackStateReason=e}addSubMetric(e){this.metric.withType(metric_js_1.MetricType.DEFAULT),this.subMetricMap.set(e,this.metric.createSubMetric().withType(metric_js_1.MetricType.BUILD_LINE))}getSubMetric(e){return this.subMetricMap.get(e)}static createTaskPath(e,t){let s="";return(0,class_identify_util_js_1.instanceOf)(e,class_type_const_js_1.ClassTypeConst.HVIGOR_PROJECT)||(s=e.getName(),""===s&&_log.errorMessageExit("Error module name,can not be empty string!")),(0,task_path_util_js_1.union)(s,t)}}exports.CoreTaskImpl=CoreTaskImpl;