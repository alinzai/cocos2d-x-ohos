"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureParentDir = exports.moveToForeignTarget = exports.renameToForeignTarget = exports.fsStateSync = exports.isWritable = void 0;
const fs_1 = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
/**
 * 校验路径是否有写权限
 * @param path
 */
function isWritable(path) {
    try {
        fs_1.default.accessSync(path, fs_1.constants.W_OK);
        return true;
    }
    catch (e) {
        return false;
    }
}
exports.isWritable = isWritable;
/**
 * 当文件不存在时,fs.statSync方法会抛异常,需要catch一下
 * @param filePath
 * @private
 */
function fsStateSync(filePath) {
    try {
        return fs_1.default.statSync(filePath);
    }
    catch (e) {
        return undefined;
    }
}
exports.fsStateSync = fsStateSync;
function renameToForeignTarget(originFilePath, copyFilePath) {
    // 读取newFile文件夹下的文件
    const files = fs_1.default.readdirSync(originFilePath, { withFileTypes: true });
    for (const file of files) {
        if (file.isDirectory()) {
            // 如果是文件夹就递归变量把最新的文件夹路径传过去
            const copyDirPath = path_1.default.resolve(copyFilePath, file.name);
            const originDirPath = path_1.default.resolve(originFilePath, file.name);
            fs_1.default.mkdirSync(copyDirPath, { recursive: true });
            renameToForeignTarget(originDirPath, copyDirPath);
        }
        else {
            // 获取旧文件夹中要复制的文件
            const originFile = path_1.default.resolve(originFilePath, file.name);
            // 获取新文件夹中复制的地方
            const copyFile = path_1.default.resolve(copyFilePath, file.name);
            // 将文件从旧文件夹剪切到新文件夹中
            fs_1.default.renameSync(originFile, copyFile);
        }
    }
}
exports.renameToForeignTarget = renameToForeignTarget;
function moveToForeignTarget(originFilePath, copyFilePath) {
    renameToForeignTarget(originFilePath, copyFilePath);
    fs_1.default.rmSync(originFilePath, { recursive: true });
}
exports.moveToForeignTarget = moveToForeignTarget;
/**
 * 创建当前路径的上一级目录
 * @param location
 */
function ensureParentDir(location) {
    const parentDir = path_1.default.resolve(location, '..');
    if (!fs_1.default.existsSync(parentDir)) {
        fs_1.default.mkdirSync(parentDir, { recursive: true });
    }
}
exports.ensureParentDir = ensureParentDir;
