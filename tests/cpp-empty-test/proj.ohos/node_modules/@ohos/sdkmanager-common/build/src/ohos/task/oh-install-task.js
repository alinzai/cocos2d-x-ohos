"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OhInstallTask = void 0;
const abstract_install_task_1 = require("../../core/task/abstract-install-task");
const sdk_exception_1 = require("../../core/api/sdk-exception");
const error_tip_1 = require("../../core/api/error-tip");
const node_os_1 = __importDefault(require("node:os"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const oh_component_constants_1 = require("../const/oh-component-constants");
const file_util_1 = require("../../core/util/file-util");
class OhInstallTask extends abstract_install_task_1.AbstractInstallTask {
    constructor(component, axiosInstance, sdkSettings) {
        super(component, axiosInstance, sdkSettings);
    }
    download(progress) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const url = (_a = this.component.getArchive()) === null || _a === void 0 ? void 0 : _a.getUrl();
            if (!url) {
                throw new sdk_exception_1.SdkException('Could not found download url.', new error_tip_1.ErrorTip('', 'The network or server is abnormal.', `${node_os_1.default.EOL}1. Check the network connection and download the file again.\
            ${node_os_1.default.EOL}2. If the issue persists, choose Help > Show Log in Explorer to obtain logs, \
          and then choose Help > Contact Support for technical assistance.`));
            }
            progress.info(`Downloading ${url}...`);
            const downloadLocation = path_1.default.resolve(this.getWorkDir(), this._getFileName(url));
            (0, file_util_1.ensureParentDir)(downloadLocation);
            try {
                fs_1.default.rmSync(downloadLocation, { force: true, recursive: true }); // 下载前先删除之前可能残留的文件
            }
            catch (e) {
                throw new sdk_exception_1.SdkException('', new error_tip_1.ErrorTip('', `Unable to delete ${downloadLocation}. A file may be open by another program.`, 'Close the open file, delete the folder, and then download the SDK again.'));
            }
            const response = yield this.axiosInstance.get(url, { responseType: 'stream' }).catch(error => {
                throw new sdk_exception_1.SdkException('Failed to download sdk', new error_tip_1.ErrorTip('', `The network or server is abnormal: ${error.message}`, `${node_os_1.default.EOL}1. Check the network connection and download the file again.\
            ${node_os_1.default.EOL}2. If the issue persists, choose Help > Show Log in Explorer to obtain logs, \
          and then choose Help > Contact Support for technical assistance.`));
            });
            yield fs_1.default.promises.writeFile(downloadLocation, response.data, 'binary').catch(error => {
                throw new sdk_exception_1.SdkException('Failed to save sdk', new error_tip_1.ErrorTip('', `${error.message}`, ''));
            });
            return downloadLocation;
        });
    }
    _getFileName(url) {
        const index = url.lastIndexOf('/');
        if (index === -1) {
            return url;
        }
        return url.substring(index + 1);
    }
    getUniPackageName() {
        return oh_component_constants_1.OH_UNI_PACKAGE_NAME;
    }
}
exports.OhInstallTask = OhInstallTask;
