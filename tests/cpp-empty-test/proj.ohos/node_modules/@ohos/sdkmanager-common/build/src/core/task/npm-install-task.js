"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NpmInstallTask = void 0;
const sdk_exception_1 = require("../api/sdk-exception");
const error_tip_1 = require("../api/error-tip");
const node_child_process_1 = require("node:child_process");
const fs_1 = __importDefault(require("fs"));
const node_path_1 = __importDefault(require("node:path"));
const abstract_component_task_1 = require("./abstract-component-task");
const url_util_1 = require("../util/url-util");
const os_type_util_1 = require("../util/os-type-util");
const utils_1 = require("../util/utils");
const OHOS_REGISTRY = 'https://repo.harmonyos.com/npm/';
class NpmInstallTask extends abstract_component_task_1.AbstractComponentTask {
    constructor(installTask) {
        super(installTask.getComponent());
        this._env = process.env;
        this.prepare = (progress) => __awaiter(this, void 0, void 0, function* () {
            yield this._installTask.prepare(progress);
            return this.doNpmInstall(progress);
        });
        this.complete = (progress) => __awaiter(this, void 0, void 0, function* () {
            return this._installTask.complete(progress);
        });
        this.doNpmInstall = (progress) => __awaiter(this, void 0, void 0, function* () {
            return this.installDependencies(progress);
        });
        this.installDependencies = (process) => __awaiter(this, void 0, void 0, function* () {
            process.info(`Installing ${this.getComponent().getDisplayName()} dependencies...`);
            const acePath = this.getRunNpmInstallPath();
            this.verifySdkJs(acePath);
            return this.runCmd(acePath, process);
        });
        this.verifySdkJs = (acePath) => {
            const packagePath = node_path_1.default.resolve(acePath, 'package.json');
            if (fs_1.default.existsSync(packagePath) && !fs_1.default.statSync(packagePath).isDirectory()) {
                return;
            }
            throw new sdk_exception_1.SdkException('Unable to execute the npm install command.', new error_tip_1.ErrorTip('', 'The package.json file cannot be found.', 'Choose Help > Show Log in Explorer to obtain logs, ' +
                'and then choose Help > Contact Support for technical assistance.'));
        };
        this.runCmd = (acePath, progress) => __awaiter(this, void 0, void 0, function* () {
            progress.info('Running \'npm install\'...');
            this.addCommonNpmCmdEnv();
            this.addNpmBinPathToEnv();
            this.addNpmRegistryIfNeed();
            const commands = [
                'install',
                '--fetch-retry-mintimeout=10000',
                '--fetch-retry-maxtimeout=15000',
                '--fetch-retries=1',
            ];
            return this.npmInstall(acePath, commands, progress);
        });
        this.addCommonNpmCmdEnv = () => {
            // npm包update-notifier的配置，关闭更新检查，每次启动会打开更新检查，没网情况下，启动cmd时会一直不退出，导致js安装失败
            this._env['NO_UPDATE_NOTIFIER'] = 'true';
        };
        this.addNpmBinPathToEnv = () => {
            const npmDirPath = node_path_1.default.dirname(process.execPath);
            const envPath = this._env[(0, os_type_util_1.getEnvPathVariable)()];
            this._env[(0, os_type_util_1.getEnvPathVariable)()] = npmDirPath + (0, os_type_util_1.getEnvPathSeparator)() + envPath;
        };
        this.addNpmRegistryIfNeed = () => {
            const registry = this._env['npm_config_@ohos:registry'];
            if ((0, utils_1.isEmpty)(registry)) {
                this._env['npm_config_@ohos:registry'] = OHOS_REGISTRY;
            }
        };
        this.getNpmBinPath = () => {
            return node_path_1.default.resolve(node_path_1.default.dirname(process.execPath), 'npm');
        };
        this.npmInstall = (_cwd, commands, progress) => __awaiter(this, void 0, void 0, function* () {
            const npmHelpUrl = (0, url_util_1.getNpmHelpUrl)(yield this.getSdkSettings().getGrsService());
            return new Promise((resolve, reject) => {
                const installProcess = (0, node_child_process_1.spawn)(`"${this.getNpmBinPath()}"`, commands, {
                    cwd: _cwd,
                    env: this._env,
                    shell: true, // 开启shell模式，在Windows上也可以使用Linux的命令执行方式
                });
                installProcess.stdout.on('data', (data) => {
                    progress.info(`${String(data)}`);
                });
                installProcess.stderr.on('data', (data) => {
                    progress.info(`${String(data)}`);
                });
                installProcess.on('close', (code) => {
                    if (code === 0) { // exitCode为0才代表正常退出
                        progress.info('\'npm install\' executed');
                        resolve();
                    }
                    else {
                        reject(new sdk_exception_1.SdkException('', new error_tip_1.ErrorTip(`Install ${this.getComponent().getDisplayName()} dependencies failed.`, 'Unable to run \'npm install\'.', `See ${npmHelpUrl}`)));
                    }
                });
                installProcess.on('error', (err) => {
                    progress.warn(err.message);
                    reject(new sdk_exception_1.SdkException('', new error_tip_1.ErrorTip(`Install ${this.getComponent().getDisplayName()} dependencies failed.`, 'Unable to run \'npm install\'.', `See ${npmHelpUrl}`)));
                });
                process.on('exit', () => {
                    // 如果父级process退出了，那么子process也结束掉
                    if (!installProcess.killed) {
                        installProcess.kill('SIGINT');
                    }
                });
            });
        });
        this._installTask = installTask;
    }
    getComponent() {
        return this._installTask.getComponent();
    }
    getWorkDir() {
        return this._installTask.getWorkDir();
    }
    getRootWorkDir() {
        return this._installTask.getRootWorkDir();
    }
    getSdkSettings() {
        return this._installTask.getSdkSettings();
    }
    getSdkRoot() {
        return this._installTask.getSdkRoot();
    }
    getTempComponentPath() {
        return this._installTask.getTempComponentPath();
    }
    download(progress) {
        progress.debug('Nothing to do');
        return Promise.resolve('');
    }
}
exports.NpmInstallTask = NpmInstallTask;
