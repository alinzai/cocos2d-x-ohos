"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.WorkerPoolImpl=void 0;const work_js_1=require("../model/work.js"),pool_state_js_1=require("../enum/pool-state.js"),dispatcher_factory_js_1=require("../dispatcher/dispatcher-factory.js"),dispatcher_type_js_1=require("../enum/dispatcher-type.js"),worker_manager_impl_js_1=require("../worker-manager/worker-manager-impl.js"),tcb_store_js_1=require("../store/tcb-store.js"),noop_js_1=require("../../../util/noop.js"),priority_js_1=require("../enum/priority.js"),constant_js_1=require("../constant/constant.js"),task_control_center_js_1=require("../../task/core/task-control-center.js"),hvigor_log_js_1=require("../../../log/hvigor-log.js"),log_service_impl_js_1=require("../log-collection/log-service-impl.js"),cpu_js_1=require("../../../util/cpu.js"),cluster_priority_ready_queue_js_1=require("../ready-queue/cluster-priority-ready-queue.js"),itcb_js_1=require("../model/itcb.js"),task_listener_event_id_js_1=require("../../task/core/listener/task-listener-event-id.js"),index_js_1=require("../../../../index.js"),log=hvigor_log_js_1.HvigorLogger.getLogger("hvigor-worker-pool");class WorkerPoolImpl{constructor(e){this.state=pool_state_js_1.PoolState.INIT,this.dispatcher=dispatcher_factory_js_1.DispatcherFactory.getDispatcher(dispatcher_type_js_1.DispatcherType.LOOP_PRIORITY),this.logService=new log_service_impl_js_1.LogServiceImpl,this.logService.start(),this.workerManager=new worker_manager_impl_js_1.WorkerManagerImpl(e,((e,t)=>this.dispatcher.dispatch(this.logService,this.readyQueue,e,t)),(e=>{this.logService.addLog(e)})),this.readyQueue=new cluster_priority_ready_queue_js_1.ClusterPriorityReadyQueue(this.workerManager.getMaxPoolNum()),(0,cpu_js_1.startMonitor)(),this.state=pool_state_js_1.PoolState.RUNNING}getMaxPoolNum(){return this.workerManager.getMaxPoolNum()}getMinPoolNum(){return this.workerManager.getMinPoolNum()}static getInstance(e){return WorkerPoolImpl.instance||(WorkerPoolImpl.instance=new WorkerPoolImpl(e)),WorkerPoolImpl.instance}getLog(e){return this.logService.getLog(e)}clearLog(e){return this.logService.clear(e)}getState(){return this.state}setMaxIdleTime(e){this.workerManager.setMaxIdleTime(e)}setRecycleInterval(e){this.workerManager.setRecycleInterval(e)}setState(e){pool_state_js_1.transitionMap.get(this.state).has(e)&&(this.state=e,this.state===pool_state_js_1.PoolState.STOP&&this.readyQueue.clear())}warmUp(e){if(this.state!==pool_state_js_1.PoolState.RUNNING)return!1;const t=new work_js_1.Work(priority_js_1.Priority.FIRST,void 0,e),r=new itcb_js_1.ITCB(t,noop_js_1.noop,!1,[],(()=>{this.readyQueue.update(t)}),"","","");return tcb_store_js_1.TcbStore.add(r),this.readyQueue.push(t),this.dispatcher.dispatch(this.logService,this.readyQueue,this.workerManager),!0}submit(e,t,r){var o;const s=new work_js_1.Work(null!==(o=null==r?void 0:r.priority)&&void 0!==o?o:priority_js_1.Priority.MEDIUM,this.filterTargetWorkers(null==r?void 0:r.targetWorkers),t,null==r?void 0:r.workInput);return this.submitWork(e,s,r)}filterTargetWorkers(e){if(!e)return e;const t=new Set,r=[];for(const o of e)Number.isInteger(o)&&!t.has(o)&&o<this.workerManager.getMaxPoolNum()&&o>=0&&(t.add(o),r.push(o));return r}submitWork(e,t,r){if(!this.workSubmissionCanBeAccepted(t))return log.debug(`Task ${e.getPath()}'s work:${t.getId()} will not be executed in worker pool.`),itcb_js_1.ITCB.getDefaultRejectTcb(e,t,r);const o=this.initTcb(e,t,r);return this.readyQueue.push(t),this.dispatcher.dispatch(this.logService,this.readyQueue,this.workerManager),o}workSubmissionCanBeAccepted(e){const t=index_js_1.hvigor.startParameters.parallelExecution,r=this.state===pool_state_js_1.PoolState.RUNNING,o=void 0===e.getTargetWorkers()||0!==e.getTargetWorkers().length;return t&&r&&o}initTcb(e,t,r){var o,s;const i=new itcb_js_1.ITCB(t,null!==(o=null==r?void 0:r.callback)&&void 0!==o?o:noop_js_1.noop,null==r?void 0:r.useReturnVal,null!==(s=null==r?void 0:r.callbackInput)&&void 0!==s?s:[],(()=>{this.readyQueue.update(t)}),e.getNode().getName(),e.getName(),e.getPath()),a=e;return i.on(constant_js_1.PoolConstant.WORK_DONE,(t=>{log.debug(`${e.getName()} work[${t}] done.`),a.taskExecutedStatus.setWorkFinished(t),this.recordMetric(a,t,i),task_control_center_js_1.taskControlCenter.emit(task_listener_event_id_js_1.TASK_CENTER_WORK_EVENT_ID.WORK_FINISHED,e.getPath())})),i.on(constant_js_1.PoolConstant.WORK_ERROR,(t=>{log.debug(`${e.getName()} work[${t.id}] failed.`),this.recordMetric(a,t.id,i),task_control_center_js_1.taskControlCenter.emit(task_listener_event_id_js_1.TASK_CENTER_WORK_EVENT_ID.WORK_FAILED,e.getPath(),t.error)})),a.taskExecutedStatus.addWorkId(t.getId()),a.addSubMetric(t.getId()),tcb_store_js_1.TcbStore.add(i),i}recordMetric(e,t,r){const o=e.getSubMetric(t);null==o||o.setWorkerId(r.getWorkerId()),null==o||o.start(r.getStartTime()),null==o||o.close(r.getEndTime())}terminate(){return new Promise(((e,t)=>{this.state===pool_state_js_1.PoolState.TERMINATED&&e(!0),this.state===pool_state_js_1.PoolState.RUNNING&&this.setState(pool_state_js_1.PoolState.STOP),this.state===pool_state_js_1.PoolState.STOP||this.state===pool_state_js_1.PoolState.CLOSE?(this.logService.end(),this.readyQueue.clear(),tcb_store_js_1.TcbStore.clear(),this.workerManager.clear((()=>{(0,cpu_js_1.endMonitor)().then((()=>{this.setState(pool_state_js_1.PoolState.TERMINATED),e(!0)}))}))):(0,cpu_js_1.endMonitor)().then((()=>e(!1)))}))}}exports.WorkerPoolImpl=WorkerPoolImpl;