import { TaskProxy } from './task-proxy.js';
import { CoreTaskImpl } from '../../../external/task/core-task-impl.js';
/**
 * 用于转换和缓存增量任务的中间的代理
 *
 * @since 2022/9/1
 */
declare class TaskConvert {
    private proxyCache;
    constructor();
    /**
     * 转换单个增量Task
     *
     * @param {CoreTaskImpl} task
     * @return {TaskProxy}
     */
    convert(task: CoreTaskImpl): TaskProxy;
    /**
     * 根据Task的Path获取当前缓存的TaskProxy对象
     *
     * @param {string} taskPath
     * @return {TaskProxy | undefined}
     */
    getTaskProxy(taskPath: string): TaskProxy | undefined;
    getAllIncrementalTaskProxy(): TaskProxy[];
}
export declare const taskConVert: TaskConvert;
export {};
