"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,r,t,i){void 0===i&&(i=t);var o=Object.getOwnPropertyDescriptor(r,t);o&&!("get"in o?!r.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return r[t]}}),Object.defineProperty(e,i,o)}:function(e,r,t,i){void 0===i&&(i=t),e[i]=r[t]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&__createBinding(r,e,t);return __setModuleDefault(r,e),r};Object.defineProperty(exports,"__esModule",{value:!0}),exports.LegacyMergeProfile=void 0;const fs=__importStar(require("fs-extra")),lodash_1=require("lodash"),common_const_js_1=require("../../const/common-const.js"),merge_type_rule_js_1=require("../../enum/merge-type-rule.js"),ohos_logger_js_1=require("../../utils/log/ohos-logger.js"),project_file_reader_js_1=require("../../utils/project-file-reader.js"),task_names_js_1=require("../common/task-names.js"),legacy_pre_build_js_1=require("./legacy-pre-build.js"),file_set_js_1=require("@ohos/hvigor-base/src/internal/snapshot/util/file-set.js");var LegacyFATask=task_names_js_1.TaskNames.LegacyFATask;const abstract_merge_profile_js_1=require("../abstract-merge-profile.js"),inject_util_js_1=require("../../utils/inject-util.js");class LegacyMergeProfile extends abstract_merge_profile_js_1.AbstractMergeProfile{constructor(e){super(e,LegacyFATask.MERGE_PROFILE),this._log=ohos_logger_js_1.OhosLogger.getLogger(LegacyMergeProfile.name),this._harLibs=this.mergeHarLibs(common_const_js_1.CommonConst.CONFIG_JSON);const r=this.service.getModuleModel().getSourceSetByTargetName(this._targetName);this._moduleTargetRes=r.getLegacyModuleTargetRes(),this._mergedModuleJson=this._pathInfo.getIntermediatesMergeLegacyProfile()}initTaskDepends(){this.module.registryDependsOnTask(this,new legacy_pre_build_js_1.LegacyPreBuild(this.targetService))}initHarModuleDepends(){this.service.getModuleDependencyNames().forEach((e=>{this.dependsOn(`default@${LegacyFATask.MERGE_PROFILE.name}`,e)}))}mergeDslConfig(e){this._bundleName&&(e.app.bundleName=this._bundleName,this._appBundleName=this._bundleName,this._log.debug(`Change app bundleName with '${this._bundleName}'.`)),e.app.apiVersion={target:this._targetSdkVersion,compatible:this._compatibleSdkVersion,releaseType:this._releaseType},this._log.debug(`Change app target API version with '${this._targetSdkVersion}'`),this._log.debug(`Change app minimum API version with '${this._compatibleSdkVersion}'`),this._log.debug(`Change app releaseType with '${this._releaseType}'`)}doTaskAction(e){const r=this._moduleTargetRes.getConfigJsonOpt();this._appBundleName=r.app.bundleName;const t=this._harLibs.map((e=>fs.pathExistsSync(e)?project_file_reader_js_1.ProjectFileReader.getJson5Obj(e):(this._log.warn(`${e} not found, The library will not be merged.\n         Check the configuration of this module.`),null))),i=this.mergeAllConfig(r,t);if(this.mergeDslConfig(i),inject_util_js_1.InjectUtil.isDebug()){void 0===i.deviceConfig.default&&(i.deviceConfig.default={}),i.deviceConfig.default.debug=!0}fs.outputJSONSync(this._mergedModuleJson,i,{spaces:"\t"})}mergeAllConfig(e,r){var t,i,o,s;for(let n=0;n<r.length;n++){const l=r[n];null!==l&&((null===(t=l.app.apiVersion)||void 0===t?void 0:t.compatible)&&(null===(i=e.app.apiVersion)||void 0===i?void 0:i.compatible)&&(null===(o=l.app.apiVersion)||void 0===o?void 0:o.compatible)>(null===(s=e.app.apiVersion)||void 0===s?void 0:s.compatible)&&this._log._buildError(`The compatible version of the HAR module ${l.module.name} \n          cannot be lower than that of the HAP module.`)._printErrorAndExit(this.moduleModel.getName()),e=this.mergeModel(e,l,"config",n===r.length-1))}return e}mergeModel(e,r,t,i){if(LegacyMergeProfile.enumInclude(merge_type_rule_js_1.KeepHapOptions,t)||void 0===r)return e;if(void 0===e)return r;return(0,lodash_1.union)(Object.keys(e),Object.keys(r)).forEach((o=>{const s=e[o],n=r[o];s&&n&&typeof s!=typeof n&&this._log._buildError(`Type of attribute ${o} in config.json/module.json5 of har\n                 is different from the one in hap. Correct the type in the config.json/module.json5 file.`)._printErrorAndExit(this.moduleModel.getName()),this.checkFieldRule(e,r,o,t);switch(void 0===s?typeof n:typeof s){case"boolean":LegacyMergeProfile.handleBooleanMerge(e,s,n,o);break;case"string":case"number":LegacyMergeProfile.handleStringOrNumberMerge(e,s,n,o,t);break;case"object":Array.isArray(s)||Array.isArray(n)?this.handleArrayMerge(e,s,n,o,t,i):LegacyMergeProfile.enumInclude(merge_type_rule_js_1.IsMapFields,o)?this.handleMapMerge(e,s,n,o,t,i):e[o]=this.mergeModel(s,n,o,i);break;default:this._log.error("An unrecognized type!")}})),e}mergeList(e,r,t,i){let o=[];if("skills"===t)return e;switch(0===e.length?typeof r[0]:typeof e[0]){case"string":o=(0,lodash_1.union)(e,r);break;case"object":LegacyMergeProfile.enumInclude(merge_type_rule_js_1.HasPlaceholderOptions,t)&&(e.forEach((e=>this.disposePlaceHolder(e,t))),r.forEach((e=>this.disposePlaceHolder(e,t)))),e.forEach((e=>{null===this.findObjectByUniqueKey(r,e,t)&&o.push(e)})),r.forEach((r=>{const s=this.findObjectByUniqueKey(e,r,t);if(null===s)o.push(r);else{const e=this.mergeModel(s,r,t,i);o.push(this.mergeRule(e,s))}}));break;default:this._log.error(`Other Type! ${t}`)}if(i)for(const e of o)Object.keys(e).includes("mergeRule")&&(e.mergeRule=void 0);return o}findObjectByUniqueKey(e,r,t){const i=LegacyMergeProfile.getUniqueKey(r,t);for(const o of e){const e=LegacyMergeProfile.getUniqueKey(o,t);if("abilities"===t){const e=r.targetAbility,t=o.targetAbility;!e&&t&&e===i&&this._log._buildError(`'${e}' conflict occurred when merging the config.json files in HAP and HAR packages. Verify the target function settings.`)._printErrorAndExit(this.moduleModel.getName())}if(i===e)return o}return null}static getUniqueKey(e,r){return LegacyMergeProfile.enumInclude(merge_type_rule_js_1.UniqueKeyEqualsName,r)?e.name:"shortcuts"===r?e.shortcutId:"abilities"===r?void 0===e.targetAbility?e.name:e.targetAbility:null}mergeRule(e,r){if(null===r||void 0===r.mergeRule)return e;const t=r.mergeRule;if(t.replace){t.replace.forEach((t=>{e[t]&&(e[t]=r[t])}))}if(t.remove){t.remove.forEach((r=>{e[r]&&(e[r]=void 0)}))}return e}mergeMap(e,r,t,i,o){if(void 0===e)return e;if(void 0===r)return r;const s=(0,lodash_1.cloneDeep)(e),n=Object.keys(e),l=Object.keys(r),a=(0,lodash_1.difference)(l,n);t&&a.forEach((e=>{s[e]=r[e]}));return(0,lodash_1.intersection)(l,n).forEach((t=>{Array.isArray(e[t])?s[t]=(0,lodash_1.union)(e[t],r[t]):"object"==typeof e[t]&&(s[t]=this.mergeModel(e[t],r[t],i,o))})),s}checkFieldRule(e,r,t,i){if(!LegacyMergeProfile.enumInclude(merge_type_rule_js_1.IsNeedMergeRule,i)||LegacyMergeProfile.enumInclude(merge_type_rule_js_1.KeepAbilityMergeList,i)||"skills"===t)return;const o=e[t],s=r[t];if(void 0!==o&&void 0!==s&&!(0,lodash_1.isEqual)(o,s)){const r=e.mergeRule;if(!(0,lodash_1.union)(r.replace,r.remove).includes(t)){const e=`Unable to merge Config.json files.The value '${i}'${LegacyMergeProfile.getUniqueKey(o,i)}' conflicts with the value: '${t}' of a subtag in the HAR file.Verify and then add 'mergeRule' in the HAP.`;throw this._log._buildError(e)._printErrorAndExit(this.moduleModel.getName()),new Error(e)}}}disposePlaceHolder(e,r){return Object.keys(e).forEach((t=>{var i;if(LegacyMergeProfile.enumInclude(merge_type_rule_js_1.NeedDisposePlaceholder,t)&&("abilities"!==r||"name"!==t)){const r=e[t];if("string"==typeof r)e[t]=r.replace("{bundleName}",this._appBundleName);else if(Array.isArray(r)&&0!==r.length)if("string"==typeof r[0]){const r=[];for(const i of e[t])r.push(i.replace("{bundleName}",this._appBundleName));e[t]=r}else{const r=[];for(const o of e[t])o.name=null===(i=o.name)||void 0===i?void 0:i.replace("{bundleName}",this._appBundleName),r.push(o);e[t]=r}}})),e}static enumInclude(e,r){return Object.values(e).includes(r)}static handleBooleanMerge(e,r,t,i){LegacyMergeProfile.enumInclude(merge_type_rule_js_1.KeepOneOfThem,i)&&(e[i]=void 0===r&&void 0!==t?t:r)}static handleStringOrNumberMerge(e,r,t,i,o){let s=void 0===r&&void 0!==t?t:r;"deviceConfig"!==o&&"module"!==o||(s=r),e[i]=s}handleArrayMerge(e,r,t,i,o,s){const n=Array.isArray(r)?r:[],l=Array.isArray(t)?t:[];let a;a="module"===o&&LegacyMergeProfile.enumInclude(merge_type_rule_js_1.KeepModuleAttr,i)?[...n]:this.mergeList(n,l,i,s),0!==a.length&&(e[i]=a)}handleMapMerge(e,r,t,i,o,s){let n=!0;"config"===o&&(n=!1,void 0===r.default&&void 0!==t.default&&(void 0===t.default.allowComponentsProxy?t.default=void 0:r.default={})),e[i]=this.mergeMap(r,t,n,i,s)}declareInputFiles(){const e=new file_set_js_1.FileSet;return e.addEntry(this._moduleTargetRes.getJsonPath()),this._harLibs.forEach((r=>{fs.existsSync(r)&&e.addEntry(r)})),e}declareOutputFiles(){return(new file_set_js_1.FileSet).addEntry(this._mergedModuleJson)}}exports.LegacyMergeProfile=LegacyMergeProfile;