"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.CmakeArg=exports.CmakeUtil=void 0;const crypto_1=__importDefault(require("crypto")),fs_extra_1=__importDefault(require("fs-extra")),path_1=__importDefault(require("path")),code_type_enum_js_1=require("../enum/code-type-enum.js"),common_const_js_1=require("../const/common-const.js"),file_util_js_1=require("./file-util.js"),ohos_logger_js_1=require("./log/ohos-logger.js");class CmakeUtil{static checkNativeCache(e,t){var a;const r=null===(a=e.getProfileOpt().buildOption)||void 0===a?void 0:a.externalNativeOptions,i=null==r?void 0:r.cFlags,s=null==r?void 0:r.cppFlags,o=null==r?void 0:r.arguments,l=[i?i.trim():"",s?s.trim():"",o?o.trim():""],u=crypto_1.default.createHash("sha256").update(l.join(" ").trim()).update(e.getProjectDir()).update(t).digest("hex");return CmakeUtil.getNativeCache(e.getName())!==u&&(CmakeUtil.updateNativeCache(e.getName(),u),!0)}static cleanCache(e){const t=path_1.default.resolve(e,"CMakeCache.txt");file_util_js_1.FileUtil.deleteFile(t)}static getNativeCache(e){return file_util_js_1.FileUtil.readFile(this.resolveModuleCache(e))}static updateNativeCache(e,t){const a=this.resolveModuleCache(e);try{const e=path_1.default.dirname(a);if(fs_extra_1.default.existsSync(e)){fs_extra_1.default.statSync(e).isFile()&&fs_extra_1.default.rmSync(e,{recursive:!0})}fs_extra_1.default.outputFileSync(a,t)}catch(e){this._log.error(`Please check the native cache and remove it \n        at ${a}`)}}static resolveModuleCache(e){return path_1.default.resolve(CmakeUtil._nativeCacheDir,"native",e)}static getCmakeListDir(e,t){return void 0!==t&&""!==t.trim()||(t="./src/main/cpp/CMakeLists.txt"),path_1.default.resolve(e,t,"..")}static checkAbiFilters(e){return void 0===e||0===e.length?["arm64-v8a","armeabi-v7a"]:e}static nativeTaskCondition(e,t,a){return e.getSourceSetByTargetName(t.getTargetName()).getCodeMap().has(code_type_enum_js_1.CodeType.CPP)&&void 0!==a&&t.getTargetName()!==common_const_js_1.DefaultTargetConst.OHOS_TEST_TARGET}static mergeCommandLine(e,t){const a=CmakeUtil.getArguments(t),r=CmakeUtil.parseCmakeArgs(a,void 0);return CmakeUtil.parseCmakeArgs(e,r),CmakeUtil.toCommandLine(r,e)}static toCommandLine(e,t){const a=[t[0]];return e.forEach((e=>a.push(CmakeUtil.assembleArg(e)))),a}static parseCmakeArgs(e,t){return t=t||new Map,e.forEach((e=>{const a=CmakeUtil.parseArg(e.trim());if(void 0!==a){const e=a.getPrefix()+a.getKey();t.has(e)||t.set(e,a)}})),t}static getArguments(e){return e.split(" ").filter((e=>e.startsWith("-")))}static parseArg(e){if(!e.startsWith("-"))return;const t=e.substring(0,2),a=e.substring(2),r=a.indexOf("=");if(-1===r)return new CmakeArg(t,a,void 0);{const e=a.substring(0,r).trim(),i=a.substring(r+1).trim();return new CmakeArg(t,e,i)}}static assembleArg(e){return void 0===e.getValue()?e.getPrefix()+e.getKey():`${e.getPrefix()+e.getKey()}=${e.getValue()}`}static mkCodeModelRequest(e){fs_extra_1.default.mkdirSync(path_1.default.resolve(e,".cmake","api","v1","query","codemodel-v2"),{recursive:!0})}}exports.CmakeUtil=CmakeUtil,CmakeUtil._log=ohos_logger_js_1.OhosLogger.getLogger("Cmake"),CmakeUtil._nativeCacheDir=path_1.default.resolve(process.cwd(),".hvigor","cache");class CmakeArg{constructor(e,t,a){this._prefix=e,this._key=t,this._value=a}getPrefix(){return this._prefix}setPrefix(e){this._prefix=e}getKey(){return this._key}setKey(e){this._key=e}getValue(){return this._value}setValue(e){this._value=e}}exports.CmakeArg=CmakeArg;