package PACKAGE_NAME;

import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Map;
import ohos.aafwk.ability.DataAbilityOperation;
import ohos.aafwk.ability.DataAbilityResult;
import ohos.aafwk.content.Intent;
import ohos.aafwk.ability.OperationExecuteException;
import ohos.ace.ability.AceDataAbility;
import ohos.bundle.AbilityInfo;
import ohos.data.dataability.DataAbilityPredicates;
import ohos.data.rdb.ValuesBucket;
import ohos.data.resultset.ResultSet;
import ohos.utils.net.Uri;
import ohos.utils.PacMap;

public class ABILITY_NAME extends AceDataAbility {

    @Override
    public void onStart(Intent intent) {
        super.onStart(intent);
    }

    @Override
    protected void onInitialized(AbilityInfo abilityInfo) {
        setInstanceName("ABILITY_SRC_PATH");
        super.onInitialized(abilityInfo);
    }

    @Override
    public void onStop() {
        super.onStop();
    }

    @Override
    public Uri normalizeUri(Uri uri) {
        return super.normalizeUri(uri);
    }

    @Override
    public Uri denormalizeUri(Uri uri) {
        return super.denormalizeUri(uri);
    }

    @Override
    public String getType(Uri uri) {
        return super.getType(uri);
    }

    @Override
    public String[] getFileTypes(Uri uri, String mimeTypeFilter) {
        return super.getFileTypes(uri, mimeTypeFilter);
    }

    @Override
    public FileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {
        return super.openFile(uri, mode);
    }

    @Override
    public PacMap call(String method, String arg, PacMap extras) {
        return super.call(method, arg, extras);
    }

    @Override
    public int delete(Uri uri, DataAbilityPredicates predicates) {
        return super.delete(uri, predicates);
    }

    @Override
    public int update(Uri uri, ValuesBucket value, DataAbilityPredicates predicates) {
        return super.update(uri, value, predicates);
    }

    @Override
    public int insert(Uri uri, ValuesBucket value) {
        return super.insert(uri, value);
    }

    @Override
    public int batchInsert(Uri uri, ValuesBucket[] values) {
        return super.batchInsert(uri, values);
    }

    @Override
    public ResultSet query(Uri uri, String[] columns, DataAbilityPredicates predicates) {
         return super.query(uri, columns, predicates);
    }

    @Override
    public DataAbilityResult[] executeBatch(ArrayList<DataAbilityOperation> operations)
        throws OperationExecuteException {
        return super.executeBatch(operations);
    }
}
